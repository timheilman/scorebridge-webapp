import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import { RootState } from "../../app/store";
import { Project } from "../../projects/Project";
import { fetchProjectList } from "./projectListAPI";

export interface ProjectListState {
  value: Project[];
  status: "idle" | "loading" | "failed";
}

const initialState: ProjectListState = {
  value: [],
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loadProjectListAsync = createAsyncThunk(
  "projectList/loadProjectListAsync",
  async () => {
    const response = await fetchProjectList();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  },
);

export const projectListSlice = createSlice({
  name: "projectList",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  reducers: {
    storeProject: (state, action: PayloadAction<Project>) => {
      const queryId = action.payload.id;
      // updating the value wholesale:
      const updatedProjects = state.value.map((p: Project) => {
        return p.id === queryId ? action.payload : p;
      });
      state.value = updatedProjects;
      // I'm interested to know if this would work instead:
      // const foundProject = state.value.find((p) => p.id === queryId);
      // if (foundProject) {
      //   state.value[state.value.findIndex((p)=> p.id === queryId)] = action.payload;
      // }
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(loadProjectListAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loadProjectListAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
      })
      .addCase(loadProjectListAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

// no sync actions yet...
export const { storeProject } = projectListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectProjectList = (state: RootState) => state.projectList.value;

export default projectListSlice.reducer;
